/*
    This file was generated automatically by Alchitry Labs 2.0.24-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module game_datapath #(
        parameter SLOW_CLOCK_DIV = 5'h1a
    ) (
        input wire button_up,
        input wire button_down,
        input wire button_left,
        input wire button_right,
        input wire button_middle,
        input wire clk,
        input wire rst,
        output reg [3:0] countdown_out,
        output reg [3:0] stage_out,
        output reg [3:0] current_seq,
        output reg [31:0] debug_seg,
        output reg [7:0] debug_ioled,
        output reg [7:0] debug_ioled2
    );
    logic [31:0] input_alu_a;
    logic [31:0] input_alu_b;
    logic [31:0] M_alu_a;
    logic [31:0] M_alu_b;
    logic [5:0] M_alu_alufn;
    logic [31:0] M_alu_out;
    logic M_alu_z;
    logic M_alu_v;
    logic M_alu_n;
    
    alu alu (
        .a(M_alu_a),
        .b(M_alu_b),
        .alufn(M_alu_alufn),
        .out(M_alu_out),
        .z(M_alu_z),
        .v(M_alu_v),
        .n(M_alu_n)
    );
    
    
    localparam CLOCK_DIVIDER = 5'h1a;
    localparam _MP_SIZE_87045345 = 1'h1;
    localparam _MP_DIV_87045345 = SLOW_CLOCK_DIV;
    localparam _MP_TOP_87045345 = 1'h0;
    localparam _MP_UP_87045345 = 1'h1;
    logic [0:0] M_game_timer_clock_value;
    
    counter #(
        .SIZE(_MP_SIZE_87045345),
        .DIV(_MP_DIV_87045345),
        .TOP(_MP_TOP_87045345),
        .UP(_MP_UP_87045345)
    ) game_timer_clock (
        .rst(rst),
        .clk(clk),
        .value(M_game_timer_clock_value)
    );
    
    
    localparam _MP_SIZE_990388707 = 1'h1;
    localparam _MP_DIV_990388707 = 5'h1a;
    localparam _MP_TOP_990388707 = 1'h0;
    localparam _MP_UP_990388707 = 1'h1;
    logic [0:0] M_slow_clk_value;
    
    counter #(
        .SIZE(_MP_SIZE_990388707),
        .DIV(_MP_DIV_990388707),
        .TOP(_MP_TOP_990388707),
        .UP(_MP_UP_990388707)
    ) slow_clk (
        .clk(clk),
        .rst(rst),
        .value(M_slow_clk_value)
    );
    
    
    localparam _MP_RISE_477369089 = 1'h1;
    localparam _MP_FALL_477369089 = 1'h0;
    logic M_edge_detector_game_timer_out;
    
    edge_detector #(
        .RISE(_MP_RISE_477369089),
        .FALL(_MP_FALL_477369089)
    ) edge_detector_game_timer (
        .in(M_game_timer_clock_value),
        .clk(clk),
        .out(M_edge_detector_game_timer_out)
    );
    
    
    localparam _MP_SIZE_1711877717 = 4'h8;
    logic [7:0] M_generator_out;
    
    random_number_generator #(
        .SIZE(_MP_SIZE_1711877717)
    ) generator (
        .slow_clk(M_slow_clk_value),
        .clk(clk),
        .out(M_generator_out)
    );
    
    
    logic [31:0] M_game_cu_regfile_rd2;
    logic [5:0] M_game_cu_alufn;
    logic [2:0] M_game_cu_asel;
    logic [2:0] M_game_cu_bsel;
    logic [3:0] M_game_cu_alu_out_sel;
    logic [3:0] M_game_cu_regfile_wa;
    logic [3:0] M_game_cu_regfile_ra1;
    logic [3:0] M_game_cu_regfile_ra2;
    logic M_game_cu_regfile_we;
    logic [31:0] M_game_cu_debug_counter;
    
    game_cu game_cu (
        .e0_button(button_up),
        .e1_button(button_right),
        .e2_button(button_down),
        .e3_button(button_left),
        .e4_button(button_middle),
        .rst(rst),
        .decrease_timer(M_edge_detector_game_timer_out),
        .clk(clk),
        .regfile_rd2(M_game_cu_regfile_rd2),
        .alufn(M_game_cu_alufn),
        .asel(M_game_cu_asel),
        .bsel(M_game_cu_bsel),
        .alu_out_sel(M_game_cu_alu_out_sel),
        .regfile_wa(M_game_cu_regfile_wa),
        .regfile_ra1(M_game_cu_regfile_ra1),
        .regfile_ra2(M_game_cu_regfile_ra2),
        .regfile_we(M_game_cu_regfile_we),
        .debug_counter(M_game_cu_debug_counter)
    );
    
    
    logic [31:0] M_game_regfiles_data;
    logic [31:0] M_game_regfiles_rd1;
    logic [31:0] M_game_regfiles_rd2;
    logic [3:0] M_game_regfiles_countdown_out;
    logic [3:0] M_game_regfiles_stage_out;
    logic [15:0] M_game_regfiles_sequence_out;
    logic [15:0] M_game_regfiles_temp_sequence_out;
    logic [1:0] M_game_regfiles_mod_sequence_out;
    logic [0:0] M_game_regfiles_check_out;
    logic [3:0] M_game_regfiles_sequence_order_out;
    logic [3:0] M_game_regfiles_timer_out;
    logic [3:0] M_game_regfiles_light_out;
    logic [3:0] M_game_regfiles_score_out;
    
    game_regfiles game_regfiles (
        .we(M_game_cu_regfile_we),
        .wa(M_game_cu_regfile_wa),
        .ra1(M_game_cu_regfile_ra1),
        .ra2(M_game_cu_regfile_ra2),
        .rst(rst),
        .clk(clk),
        .data(M_game_regfiles_data),
        .rd1(M_game_regfiles_rd1),
        .rd2(M_game_regfiles_rd2),
        .countdown_out(M_game_regfiles_countdown_out),
        .stage_out(M_game_regfiles_stage_out),
        .sequence_out(M_game_regfiles_sequence_out),
        .temp_sequence_out(M_game_regfiles_temp_sequence_out),
        .mod_sequence_out(M_game_regfiles_mod_sequence_out),
        .check_out(M_game_regfiles_check_out),
        .sequence_order_out(M_game_regfiles_sequence_order_out),
        .timer_out(M_game_regfiles_timer_out),
        .light_out(M_game_regfiles_light_out),
        .score_out(M_game_regfiles_score_out)
    );
    
    
    always @* begin
        M_game_cu_regfile_rd2 = M_game_regfiles_rd2;
        
        case (M_game_cu_asel)
            2'h0: begin
                input_alu_a = M_game_regfiles_rd1;
            end
            2'h1: begin
                input_alu_a = 1'h0;
            end
            2'h2: begin
                input_alu_a = 1'h1;
            end
            2'h3: begin
                input_alu_a = 2'h2;
            end
            default: begin
                input_alu_a = 1'h0;
            end
        endcase
        
        case (M_game_cu_bsel)
            2'h0: begin
                input_alu_b = M_game_regfiles_rd2;
            end
            2'h1: begin
                input_alu_b = 1'h0;
            end
            2'h2: begin
                input_alu_b = 1'h1;
            end
            2'h3: begin
                input_alu_b = 2'h2;
            end
            3'h4: begin
                input_alu_b = 2'h3;
            end
            3'h5: begin
                input_alu_b = 3'h4;
            end
            3'h6: begin
                input_alu_b = 4'h8;
            end
            3'h7: begin
                input_alu_b = 5'h10;
            end
            default: begin
                input_alu_b = 1'h0;
            end
        endcase
        M_alu_a = input_alu_a;
        M_alu_b = input_alu_b;
        M_alu_alufn = M_game_cu_alufn;
        
        case (M_game_cu_alu_out_sel)
            2'h0: begin
                M_game_regfiles_data = M_alu_out;
            end
            2'h1: begin
                M_game_regfiles_data = 3'h4;
            end
            2'h2: begin
                M_game_regfiles_data = 1'h1;
            end
            2'h3: begin
                M_game_regfiles_data = M_generator_out;
            end
            3'h4: begin
                M_game_regfiles_data = 1'h0;
            end
            default: begin
                M_game_regfiles_data = M_alu_out;
            end
        endcase
        countdown_out = M_game_regfiles_countdown_out;
        stage_out = M_game_regfiles_stage_out;
        current_seq = M_game_regfiles_light_out;
        debug_seg = M_game_cu_debug_counter;
        debug_ioled = M_game_regfiles_stage_out;
        debug_ioled2 = M_game_regfiles_score_out;
    end
    
    
endmodule