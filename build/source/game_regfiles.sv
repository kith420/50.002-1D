/*
    This file was generated automatically by Alchitry Labs 2.0.24-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module game_regfiles (
        input wire clk,
        input wire rst,
        input wire [3:0] wa,
        input wire we,
        input wire [31:0] data,
        input wire [3:0] ra1,
        input wire [3:0] ra2,
        output reg [31:0] rd1,
        output reg [31:0] rd2,
        output reg [3:0] countdown_out,
        output reg [3:0] stage_out,
        output reg [15:0] sequence_out,
        output reg [15:0] temp_sequence_out,
        output reg [1:0] mod_sequence_out,
        output reg [0:0] check_out,
        output reg [3:0] sequence_order_out,
        output reg [3:0] timer_out,
        output reg [3:0] light_out,
        output reg [3:0] score_out
    );
    logic [3:0] D_countdown_d, D_countdown_q = 1'h0;
    logic [3:0] D_stage_d, D_stage_q = 1'h0;
    logic [15:0] D_sequence_d, D_sequence_q = 1'h0;
    logic [15:0] D_temp_sequence_d, D_temp_sequence_q = 1'h0;
    logic [1:0] D_mod_sequence_d, D_mod_sequence_q = 1'h0;
    logic [0:0] D_check_d, D_check_q = 1'h0;
    logic [3:0] D_timer_d, D_timer_q = 1'h0;
    logic [3:0] D_sequence_order_d, D_sequence_order_q = 1'h0;
    logic [3:0] D_light_d, D_light_q = 1'h0;
    logic [3:0] D_score_d, D_score_q = 1'h0;
    always @* begin
        D_countdown_d = D_countdown_q;
        D_stage_d = D_stage_q;
        D_sequence_d = D_sequence_q;
        D_temp_sequence_d = D_temp_sequence_q;
        D_mod_sequence_d = D_mod_sequence_q;
        D_check_d = D_check_q;
        D_timer_d = D_timer_q;
        D_sequence_order_d = D_sequence_order_q;
        D_light_d = D_light_q;
        D_score_d = D_score_q;
        
        if (we) begin
            
            case (wa)
                1'h0: begin
                    D_countdown_d = data;
                end
                1'h1: begin
                    D_stage_d = data;
                end
                2'h2: begin
                    D_sequence_d = data;
                end
                2'h3: begin
                    D_temp_sequence_d = data;
                end
                3'h4: begin
                    D_mod_sequence_d = data;
                end
                3'h5: begin
                    D_check_d = data;
                end
                3'h6: begin
                    D_timer_d = data;
                end
                3'h7: begin
                    D_sequence_order_d = data;
                end
                4'h8: begin
                    D_light_d = data;
                end
                4'h9: begin
                    D_score_d = data;
                end
            endcase
        end
        
        case (ra1)
            1'h0: begin
                rd1 = D_countdown_q;
            end
            1'h1: begin
                rd1 = D_stage_q;
            end
            2'h2: begin
                rd1 = D_sequence_q;
            end
            2'h3: begin
                rd1 = D_temp_sequence_q;
            end
            3'h4: begin
                rd1 = D_mod_sequence_q;
            end
            3'h5: begin
                rd1 = D_check_q;
            end
            3'h6: begin
                rd1 = D_timer_q;
            end
            3'h7: begin
                rd1 = D_sequence_order_q;
            end
            4'h8: begin
                rd1 = D_light_q;
            end
            4'h9: begin
                rd1 = D_score_q;
            end
            default: begin
                rd1 = 1'h0;
            end
        endcase
        
        case (ra2)
            1'h0: begin
                rd2 = D_countdown_q;
            end
            1'h1: begin
                rd2 = D_stage_q;
            end
            2'h2: begin
                rd2 = D_sequence_q;
            end
            2'h3: begin
                rd2 = D_temp_sequence_q;
            end
            3'h4: begin
                rd2 = D_mod_sequence_q;
            end
            3'h5: begin
                rd2 = D_check_q;
            end
            3'h6: begin
                rd2 = D_timer_q;
            end
            3'h7: begin
                rd2 = D_sequence_order_q;
            end
            4'h8: begin
                rd2 = D_light_q;
            end
            4'h9: begin
                rd2 = D_score_q;
            end
            default: begin
                rd2 = 1'h0;
            end
        endcase
        countdown_out = D_countdown_q;
        stage_out = D_stage_q;
        sequence_out = D_sequence_q;
        temp_sequence_out = D_temp_sequence_q;
        mod_sequence_out = D_mod_sequence_q;
        check_out = D_check_q;
        timer_out = D_timer_q;
        sequence_order_out = D_sequence_order_q;
        light_out = D_light_q;
        score_out = D_score_q;
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_countdown_q <= 1'h0;
            D_stage_q <= 1'h0;
            D_sequence_q <= 1'h0;
            D_temp_sequence_q <= 1'h0;
            D_mod_sequence_q <= 1'h0;
            D_check_q <= 1'h0;
            D_timer_q <= 1'h0;
            D_sequence_order_q <= 1'h0;
            D_light_q <= 1'h0;
            D_score_q <= 1'h0;
        end else begin
            D_countdown_q <= D_countdown_d;
            D_stage_q <= D_stage_d;
            D_sequence_q <= D_sequence_d;
            D_temp_sequence_q <= D_temp_sequence_d;
            D_mod_sequence_q <= D_mod_sequence_d;
            D_check_q <= D_check_d;
            D_timer_q <= D_timer_d;
            D_sequence_order_q <= D_sequence_order_d;
            D_light_q <= D_light_d;
            D_score_q <= D_score_d;
        end
    end
endmodule