/*
    This file was generated automatically by Alchitry Labs 2.0.24-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        input wire usb_rx,
        input wire [2:0][7:0] io_dip,
        output reg usb_tx,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        output reg [7:0] ext_segment,
        output reg [0:0] ext_select,
        output reg [7:0] ext_segment2,
        output reg [0:0] ext_select2,
        input wire [4:0] io_button
    );
    logic rst;
    localparam CLK_FREQ = 27'h5f5e100;
    localparam SEVEN_SEG_DIV = 5'h10;
    localparam SLOW_CLOCK_DIV = 5'h1a;
    localparam _MP_STAGES_1358947627 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_1358947627)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam _MP_RISE_722137117 = 1'h1;
    localparam _MP_FALL_722137117 = 1'h0;
    logic M_edge_dt_btn_up_in;
    logic M_edge_dt_btn_up_out;
    
    edge_detector #(
        .RISE(_MP_RISE_722137117),
        .FALL(_MP_FALL_722137117)
    ) edge_dt_btn_up (
        .clk(clk),
        .in(M_edge_dt_btn_up_in),
        .out(M_edge_dt_btn_up_out)
    );
    
    
    localparam _MP_RISE_1880354462 = 1'h1;
    localparam _MP_FALL_1880354462 = 1'h0;
    logic M_edge_dt_btn_down_in;
    logic M_edge_dt_btn_down_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1880354462),
        .FALL(_MP_FALL_1880354462)
    ) edge_dt_btn_down (
        .clk(clk),
        .in(M_edge_dt_btn_down_in),
        .out(M_edge_dt_btn_down_out)
    );
    
    
    localparam _MP_RISE_2059398690 = 1'h1;
    localparam _MP_FALL_2059398690 = 1'h0;
    logic M_edge_dt_btn_left_in;
    logic M_edge_dt_btn_left_out;
    
    edge_detector #(
        .RISE(_MP_RISE_2059398690),
        .FALL(_MP_FALL_2059398690)
    ) edge_dt_btn_left (
        .clk(clk),
        .in(M_edge_dt_btn_left_in),
        .out(M_edge_dt_btn_left_out)
    );
    
    
    localparam _MP_RISE_1407009586 = 1'h1;
    localparam _MP_FALL_1407009586 = 1'h0;
    logic M_edge_dt_btn_right_in;
    logic M_edge_dt_btn_right_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1407009586),
        .FALL(_MP_FALL_1407009586)
    ) edge_dt_btn_right (
        .clk(clk),
        .in(M_edge_dt_btn_right_in),
        .out(M_edge_dt_btn_right_out)
    );
    
    
    localparam _MP_RISE_637756995 = 1'h1;
    localparam _MP_FALL_637756995 = 1'h0;
    logic M_edge_dt_btn_middle_in;
    logic M_edge_dt_btn_middle_out;
    
    edge_detector #(
        .RISE(_MP_RISE_637756995),
        .FALL(_MP_FALL_637756995)
    ) edge_dt_btn_middle (
        .clk(clk),
        .in(M_edge_dt_btn_middle_in),
        .out(M_edge_dt_btn_middle_out)
    );
    
    
    localparam _MP_CLK_FREQ_112026382 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_112026382 = 5'h14;
    localparam _MP_NUM_SYNC_112026382 = 2'h2;
    logic M_btn_cond_up_in;
    logic M_btn_cond_up_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_112026382),
        .MIN_DELAY(_MP_MIN_DELAY_112026382),
        .NUM_SYNC(_MP_NUM_SYNC_112026382)
    ) btn_cond_up (
        .clk(clk),
        .in(M_btn_cond_up_in),
        .out(M_btn_cond_up_out)
    );
    
    
    localparam _MP_CLK_FREQ_538104690 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_538104690 = 5'h14;
    localparam _MP_NUM_SYNC_538104690 = 2'h2;
    logic M_btn_cond_down_in;
    logic M_btn_cond_down_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_538104690),
        .MIN_DELAY(_MP_MIN_DELAY_538104690),
        .NUM_SYNC(_MP_NUM_SYNC_538104690)
    ) btn_cond_down (
        .clk(clk),
        .in(M_btn_cond_down_in),
        .out(M_btn_cond_down_out)
    );
    
    
    localparam _MP_CLK_FREQ_65153988 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_65153988 = 5'h14;
    localparam _MP_NUM_SYNC_65153988 = 2'h2;
    logic M_btn_cond_left_in;
    logic M_btn_cond_left_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_65153988),
        .MIN_DELAY(_MP_MIN_DELAY_65153988),
        .NUM_SYNC(_MP_NUM_SYNC_65153988)
    ) btn_cond_left (
        .clk(clk),
        .in(M_btn_cond_left_in),
        .out(M_btn_cond_left_out)
    );
    
    
    localparam _MP_CLK_FREQ_155670084 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_155670084 = 5'h14;
    localparam _MP_NUM_SYNC_155670084 = 2'h2;
    logic M_btn_cond_right_in;
    logic M_btn_cond_right_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_155670084),
        .MIN_DELAY(_MP_MIN_DELAY_155670084),
        .NUM_SYNC(_MP_NUM_SYNC_155670084)
    ) btn_cond_right (
        .clk(clk),
        .in(M_btn_cond_right_in),
        .out(M_btn_cond_right_out)
    );
    
    
    localparam _MP_CLK_FREQ_727536787 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_727536787 = 5'h14;
    localparam _MP_NUM_SYNC_727536787 = 2'h2;
    logic M_btn_cond_middle_in;
    logic M_btn_cond_middle_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_727536787),
        .MIN_DELAY(_MP_MIN_DELAY_727536787),
        .NUM_SYNC(_MP_NUM_SYNC_727536787)
    ) btn_cond_middle (
        .clk(clk),
        .in(M_btn_cond_middle_in),
        .out(M_btn_cond_middle_out)
    );
    
    
    localparam _MP_DIGITS_493001673 = 3'h4;
    localparam _MP_DIV_493001673 = 5'h10;
    logic [3:0][3:0] M_seg_values;
    logic [6:0] M_seg_seg;
    logic [3:0] M_seg_sel;
    
    multi_seven_seg #(
        .DIGITS(_MP_DIGITS_493001673),
        .DIV(_MP_DIV_493001673)
    ) seg (
        .clk(clk),
        .rst(rst),
        .values(M_seg_values),
        .seg(M_seg_seg),
        .sel(M_seg_sel)
    );
    
    
    localparam _MP_SLOW_CLOCK_DIV_239067680 = 5'h1a;
    logic M_game_datapath_button_up;
    logic M_game_datapath_button_down;
    logic M_game_datapath_button_left;
    logic M_game_datapath_button_right;
    logic M_game_datapath_button_middle;
    logic [3:0] M_game_datapath_countdown_out;
    logic [3:0] M_game_datapath_stage_out;
    logic [3:0] M_game_datapath_current_seq;
    logic [31:0] M_game_datapath_debug_seg;
    logic [7:0] M_game_datapath_debug_ioled;
    logic [7:0] M_game_datapath_debug_ioled2;
    
    game_datapath #(
        .SLOW_CLOCK_DIV(_MP_SLOW_CLOCK_DIV_239067680)
    ) game_datapath (
        .clk(clk),
        .rst(rst),
        .button_up(M_game_datapath_button_up),
        .button_down(M_game_datapath_button_down),
        .button_left(M_game_datapath_button_left),
        .button_right(M_game_datapath_button_right),
        .button_middle(M_game_datapath_button_middle),
        .countdown_out(M_game_datapath_countdown_out),
        .stage_out(M_game_datapath_stage_out),
        .current_seq(M_game_datapath_current_seq),
        .debug_seg(M_game_datapath_debug_seg),
        .debug_ioled(M_game_datapath_debug_ioled),
        .debug_ioled2(M_game_datapath_debug_ioled2)
    );
    
    
    localparam _MP_DIGITS_1450461624 = 3'h4;
    localparam _MP_LEADING_ZEROS_1450461624 = 1'h0;
    logic [13:0] M_bin_to_dec_converter_value;
    logic [3:0][3:0] M_bin_to_dec_converter_digits;
    
    bin_to_dec #(
        .DIGITS(_MP_DIGITS_1450461624),
        .LEADING_ZEROS(_MP_LEADING_ZEROS_1450461624)
    ) bin_to_dec_converter (
        .value(M_bin_to_dec_converter_value),
        .digits(M_bin_to_dec_converter_digits)
    );
    
    
    logic [3:0] M_ext_seg_dec_char;
    logic [6:0] M_ext_seg_dec_segs;
    
    seven_seg ext_seg_dec (
        .char(M_ext_seg_dec_char),
        .segs(M_ext_seg_dec_segs)
    );
    
    
    logic [3:0] M_ext_seg_dec2_char;
    logic [6:0] M_ext_seg_dec2_segs;
    
    seven_seg ext_seg_dec2 (
        .char(M_ext_seg_dec2_char),
        .segs(M_ext_seg_dec2_segs)
    );
    
    
    always @* begin
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        usb_tx = usb_rx;
        io_led = {{8'h0, 8'h0, 8'h0}};
        io_segment = 8'hff;
        io_select = 4'hf;
        M_btn_cond_up_in = io_button[1'h0];
        M_btn_cond_down_in = io_button[2'h2];
        M_btn_cond_left_in = io_button[2'h3];
        M_btn_cond_right_in = io_button[3'h4];
        M_btn_cond_middle_in = io_button[1'h1];
        M_edge_dt_btn_up_in = M_btn_cond_up_out;
        M_edge_dt_btn_down_in = M_btn_cond_down_out;
        M_edge_dt_btn_left_in = M_btn_cond_left_out;
        M_edge_dt_btn_right_in = M_btn_cond_right_out;
        M_edge_dt_btn_middle_in = M_btn_cond_middle_out;
        M_game_datapath_button_up = M_edge_dt_btn_up_out;
        M_game_datapath_button_down = M_edge_dt_btn_down_out;
        M_game_datapath_button_left = M_edge_dt_btn_left_out;
        M_game_datapath_button_right = M_edge_dt_btn_right_out;
        M_game_datapath_button_middle = M_edge_dt_btn_middle_out;
        io_led[1'h0] = M_game_datapath_current_seq;
        M_seg_values = {{4'h0, 4'h0, 4'h0, 4'h0}};
        M_bin_to_dec_converter_value = M_game_datapath_debug_seg;
        M_seg_values = M_bin_to_dec_converter_digits;
        io_segment = ~M_seg_seg;
        io_select = ~M_seg_sel;
        M_ext_seg_dec_char = M_game_datapath_countdown_out[1'h0];
        ext_segment = ~M_ext_seg_dec_segs;
        ext_select = 1'h0;
        M_ext_seg_dec2_char = M_game_datapath_stage_out[1'h0];
        ext_segment2 = ~M_ext_seg_dec2_segs;
        ext_select2 = 1'h0;
        io_led[1'h1] = M_game_datapath_debug_ioled;
        io_led[2'h2] = M_game_datapath_countdown_out;
    end
    
    
endmodule