module alu (
    input a[32],
    input b[32],
    input alufn[6],
    output out[32],
    output z, //
    output v, // Overflow
    output n // Negative
) {
    //mux_2 mux_2[32]
    mux_4 mux_4[32]
    mux_4 mux_4_1[32]
    
    adder adder(#SIZE(32))
    compare compare()
    boolean boolean(#SIZE(32));
    shifter shifter() 
    multiplier multiplier()
    divider divider()
    modfour modfour()
    
    sig cmp_extended[32];
    
    always {
        // Adder
        adder.a = a
        adder.b = b
        adder.alufn_signal = alufn
        
        z = adder.z
        v = adder.v
        n = adder.n
        
        // Multiplier
        multiplier.a = a
        multiplier.b = b
        
        // Boolean
        boolean.a = a
        boolean.b = b
        boolean.alufn_signal = alufn
        
        // shifter
        shifter.a = a
        shifter.b = b
        shifter.alufn = alufn
        
        // compare
        compare.z = adder.z
        compare.v = adder.v
        compare.n =  adder.n
        compare.alufn = alufn
        
        cmp_extended = c{31x{b0}, compare.cmp};
        
        divider.a = a
        divider.b = b
        
        modfour.a = a
        modfour.b = b
                
        repeat (i, 32) {
            
            mux_4_1.s0[i] = alufn[1]
            mux_4_1.s1[i] = alufn[2]
            
            mux_4_1.in[i][0] = adder.out[i]
            mux_4_1.in[i][1] = multiplier.mul[i]
            mux_4_1.in[i][2] = divider.out[i]
            mux_4_1.in[i][3] = modfour.out[i]

            //mux_2.in[i][0] = adder.out[i]
            //mux_2.in[i][1] = multiplier.mul[i]
            //mux_2.s0[i] = alufn[1]
                
            mux_4.in[i][0] = mux_4_1.out[i]
            mux_4.in[i][1] = boolean.bool[i]
            mux_4.in[i][2] = shifter.shift[i]
            mux_4.in[i][3] = cmp_extended[i]
                
            mux_4.s0[i] = alufn[4]
            mux_4.s1[i] = alufn[5]
                
            out[i] = mux_4.out[i]
        }
    }
}