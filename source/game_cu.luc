module game_cu (
    input clk,  // clock
    input rst,  // reset
    input decrease_timer, // indication of counting down
    input regfile_rd2[32], //direct reading of regfile data from rd2
    
    input e0_button,
    input e1_button,
    input e2_button,
    input e3_button,
    
    output alufn[6],
    output asel[3],
    output bsel[3],
    output alu_out_sel[4],
    output regfile_wa[4],
    output regfile_ra1[4],
    output regfile_ra2[4],
    output regfile_we,
    
    // debug
    output debug_counter[32]
) {
    const SLOW_CLOCK_DEFAULT_SPEED = $is_sim() ? 8 : 23 // put 8  for sim, 28 for hardware
    sig slow_clock
    
    .clk(clk){
        edge_detector slow_clock_edge(#RISE(1), #FALL(0))
        .rst(rst){
            dff slow_clock_counter[32]
            dff speed_pointer[$clog2(32)](#INIT(SLOW_CLOCK_DEFAULT_SPEED))
        }
    }
    
    enum GameStates {
        GENERATE_SEQUENCE,
        SG_ASSIGN_STAGE_1,
        SG_ASSIGN_TIMER_4,
        
        CHECK_STAGE4, 
        BRANCH_CHECK4,
        ASSIGN_TIMER4,
        CHECK_STAGE8,
        BRANCH_CHECK8,
        PLAYER_WINS,
        END_DISPLAY_WIN,
        
        DS_ASSIGN_TEMPR,
        DS_ASSIGN_E_R4,
        DS_ACTIVATE_LIGHT,
        DS_DEACTIVATE_LIGHT,
        DS_SHR_TEMPR,
        DS_INCREASE_SEQ_ORDER,
        DS_CHECK_SEQ_ORDER,
        DS_BRANCH_SEQ_CHECK,
        
        PR_RESET_SEQ_ORD,
        PR_ASSIGN_TEMP_SEQ,
        
        START_SET_TIMER,
        IDLE,
        GAMEOVER,
        END_DISPLAY_OVER,
        
        DECREASE_GAMETIMER,
        CHECK_GAMETIMER,
        BRANCH_GAMETIMER,
        
        PG_ASSIGN_E_R4,
        PG_SHR_TEMPR,
        PG_INCREASE_SEQ_ORDER,
        PG_CHECK_SEQ_ORDER,
        PG_BRANCH_SEQ_CHECK,
        
        CHECK_ELEMENT_0,
        CHECK_ELEMENT_1,
        CHECK_ELEMENT_2,
        CHECK_ELEMENT_3,
        BRANCH_ELEMENT_BUTTON,
        
        FR_RESET_SEQ_ORD,
        FR_ASSIGN_TEMP_SEQ,
        FR_INCREASE_SCORE_1,
        FR_INCREASE_STAGE_1
    }
    
    dff game_fsm[$width(GameStates)](#INIT(GameStates.SG_ASSIGN_STAGE_1), .clk(clk), .rst(rst))
    
    always {
        // debug
        debug_counter = 0
        
        slow_clock_counter.d = slow_clock_counter.q + 1
        speed_pointer.d = speed_pointer.q  // Controls speed of clock/counting
        slow_clock = slow_clock_counter.q[speed_pointer.q]
        slow_clock_edge.in =  slow_clock
        
        // standard setting unless otherwise overwritten by each case 
        alufn = 0
        asel = 0 
        bsel = 0
        regfile_we = 0
        regfile_wa = d6 
        regfile_ra1 = d0
        regfile_ra2 = d0
        alu_out_sel = 0      
        
        game_fsm.d = game_fsm.q     
        if (rst){
            //game_fsm.d = GameStates.IDLE
            game_fsm.d = GameStates.SG_ASSIGN_STAGE_1
        }
        else{       
            case(game_fsm.q){
                // correct
                GameStates.GENERATE_SEQUENCE: //to fix later, used to generate the sequence
                    regfile_we = 1
                    regfile_wa = d2     // sequence reg
                    alu_out_sel = b11 
                    game_fsm.d = GameStates.CHECK_STAGE4
                    debug_counter = 1
                //game_fsm.d = GameStates.IDLE        
                
                // correct
                GameStates.SG_ASSIGN_STAGE_1: // give the stage dff a value of 1
                    regfile_we = 1
                    regfile_wa = d1     // stage reg
                    alu_out_sel = b10
                    debug_counter = 2
                    game_fsm.d = GameStates.SG_ASSIGN_TIMER_4
                
                // correct
                GameStates.SG_ASSIGN_TIMER_4: // give the timer dff a value of 4
                    regfile_we = 1
                    regfile_wa = d6     // timer reg
                    alu_out_sel = b01
                    debug_counter = 3
                    game_fsm.d = GameStates.GENERATE_SEQUENCE
                
                // correct
                GameStates.CHECK_STAGE4: // check if your stage is equal to 4
                    alufn = h33             //CMPEQ
                    regfile_ra1 = d1    // stage reg
                    asel = b00
                    bsel = b101
                    regfile_we = 1
                    regfile_wa = d5     // check reg
                    debug_counter = 4
                    game_fsm.d = GameStates.BRANCH_CHECK4
                
                // correct (else)
                GameStates.BRANCH_CHECK4: // branch checking of if your stage is equal to 4
                    regfile_ra2 = d5    // check reg
                    //if rd2 == 1
                    if (regfile_rd2[0]){
                        game_fsm.d = GameStates.ASSIGN_TIMER4
                    }
                    else{
                        game_fsm.d = GameStates.CHECK_STAGE8
                    }
                
                // ok
                GameStates.ASSIGN_TIMER4: // if yes, then add 4 to the timer dff (make it equal to 8)
                    alufn = h00 //ADD 
                    regfile_ra1 = d6    // timer reg
                    asel = b00
                    bsel = b101
                    regfile_we = 1
                    regfile_wa = d6     // timer reg
                    game_fsm.d = GameStates.DS_ASSIGN_TEMPR
                
                // correct
                GameStates.CHECK_STAGE8: // if not, check if the stage number is <= 8
                    debug_counter = 5
                    alufn = h37                    //CMPLE
                    regfile_ra1 = d1    // stage reg
                    asel = b00
                    bsel = b110
                    regfile_we = 1     
                    regfile_wa = d5     // check reg
                    game_fsm.d = GameStates.BRANCH_CHECK8
                
                // correct (1)
                GameStates.BRANCH_CHECK8: // branching the checking if the stage number is <= 8
                    regfile_ra2 = d5    // check reg
                    //if rd2 == 1
                    if (regfile_rd2[0]){ // if yes, move on to displaying the sequence
                        game_fsm.d = GameStates.DS_ASSIGN_TEMPR
                    }
                    else{ // if not, then the player has passed all 8 stages and wins the game
                        game_fsm.d = GameStates.PLAYER_WINS
                    }
                
                // correct
                GameStates.DS_ASSIGN_TEMPR: // copy over the sequence to the temp sequence register to modify
                    debug_counter = 6
                    alufn = h1A // LDR "A" 1A
                    regfile_ra1 = d2    // sequence reg
                    regfile_ra2 = d3    // temp sequence reg
                    asel = b00
                    bsel = b00
                    regfile_we = 1
                    regfile_wa = d3     // temp sequence reg
                    game_fsm.d = GameStates.DS_ASSIGN_E_R4
                
                // correct
                GameStates.DS_ASSIGN_E_R4: // extract the last 2 bits of the temp sequence and assign to mod seq reg
                    debug_counter = 6
                    alufn = h06
                    regfile_ra1 = d3    // temp sequence reg
                    asel = b00
                    regfile_we = 1
                    regfile_wa = d4     // mod sequence reg
                    game_fsm.d = GameStates.DS_ACTIVATE_LIGHT
                
                // correct
                GameStates.DS_ACTIVATE_LIGHT: // rewrite the lights reg to have value of 2^(button pressed) (turn on the lights)
                    
                    if (slow_clock_edge.out){
                        debug_counter = 7
                        alufn = h20     // SHL
                        regfile_ra2 = d4    // mod sequence reg
                        asel = b10
                        bsel = b00
                        regfile_we = 1
                        regfile_wa = d8     // lights reg
                        game_fsm.d = GameStates.DS_DEACTIVATE_LIGHT
                    }
                
                // correct
                GameStates.DS_DEACTIVATE_LIGHT: // rewrite the lights reg to have value of 0 (turn off the lights)
                    if (slow_clock_edge.out){
                        debug_counter = 8
                        regfile_we = 1
                        regfile_wa = d8     // lights reg
                        alu_out_sel = b100
                        game_fsm.d = GameStates.DS_SHR_TEMPR  
                    }
                
                
                // correct
                GameStates.DS_SHR_TEMPR: // delete last 2 bits of the temp sequence 
                    debug_counter = 9
                    alufn = h21     // SHR
                    regfile_ra1 = d3    // mod sequence reg
                    asel = b00
                    bsel = b11
                    regfile_we = 1
                    regfile_wa = d3     // mod sequence reg
                    game_fsm.d = GameStates.DS_INCREASE_SEQ_ORDER 
                
                
                
                // correct
                GameStates.DS_INCREASE_SEQ_ORDER: // increase seq order reg by 1
                    debug_counter = 10
                    alufn = h00     // ADD
                    regfile_ra1 = d7    // seq order reg
                    asel = b00
                    bsel = b10
                    regfile_we = 1
                    regfile_wa = d7     // seq order reg
                    game_fsm.d = GameStates.DS_CHECK_SEQ_ORDER
                
                // correct
                GameStates.DS_CHECK_SEQ_ORDER: // check if the seq order reg now is still < stage reg
                    debug_counter = 11
                    alufn = h35     // CMPLT
                    regfile_ra1 = d7    // seq order reg
                    regfile_ra2 = d1    // stage reg
                    asel = b00
                    bsel = b00
                    regfile_we = 1
                    regfile_wa = d5     // check reg
                    game_fsm.d = GameStates.DS_BRANCH_SEQ_CHECK
                
                // correct (!1)
                GameStates.DS_BRANCH_SEQ_CHECK: // branch check above
                    regfile_ra2 = d5    // check reg
                    if (regfile_rd2[0]){ // if yes, continue to display the other elements
                        game_fsm.d = GameStates.DS_ASSIGN_E_R4
                    }
                    else{ // if no, displaying is done and can continue to resetting before round starts
                        game_fsm.d = GameStates.PR_RESET_SEQ_ORD
                    }
                
                // correct
                GameStates.PR_RESET_SEQ_ORD: // assign 0 to the seq order register
                    debug_counter = 12
                    regfile_we = 1
                    regfile_wa = d7     // seq order reg
                    alu_out_sel = b100
                    game_fsm.d = GameStates.PR_ASSIGN_TEMP_SEQ
                
                // correct 
                GameStates.PR_ASSIGN_TEMP_SEQ: // copy over the sequence to the temp sequence register to modify 
                    // assign again for checking of button input
                    debug_counter = 13
                    alufn = h1A // LDR "A" 1A
                    regfile_ra1 = d2    // sequence reg
                    regfile_ra2 = d3    // temp sequence reg
                    asel = b00
                    bsel = b00
                    regfile_we = 1
                    regfile_wa = d3     // temp sequence reg
                    game_fsm.d = GameStates.START_SET_TIMER
                
                // correct
                GameStates.START_SET_TIMER: // assign the countdown register the value of the timer register
                    debug_counter = 14        
                    alufn = h1A // LDR "A" 1A
                    regfile_ra1 = d6    // timer reg
                    regfile_ra2 = d0    // countdown reg
                    asel = b00
                    bsel = b00
                    regfile_we = 1
                    regfile_wa = d0     // countdown reg
                    game_fsm.d = GameStates.PG_ASSIGN_E_R4
                
                GameStates.DECREASE_GAMETIMER: // reduce countdown reg by 1
                    alufn = h01                         //SUB
                    regfile_ra1 = d0    // countdown reg
                    asel = b00      
                    bsel = b10                             
                    regfile_we = 1
                    regfile_wa = d0
                    game_fsm.d = GameStates.IDLE
                
                GameStates.CHECK_GAMETIMER:    // check if the countdown is equal to 0
                    alufn = h33                         //CMPEQ
                    regfile_ra2 = d0          // countdown reg
                    asel = b01
                    bsel = b00                              //constant 0
                    regfile_we = 1
                    regfile_wa = d5                 //check reg
                    debug_counter = 66
                    game_fsm.d = GameStates.BRANCH_GAMETIMER
                
                GameStates.BRANCH_GAMETIMER:      // branch check above
                    regfile_ra2 = d5          
                    if (~regfile_rd2[0]){  //if timer is not zero, reduce countdown by 1
                        game_fsm.d = GameStates.DECREASE_GAMETIMER
                    }
                    else{    // if equal to 0, player has not pressed all the buttons and loses
                        game_fsm.d = GameStates.GAMEOVER
                    }
                
                // correct
                GameStates.PG_ASSIGN_E_R4:     // assign the last 2 bits of the temp seq to the mod seq reg
                    debug_counter = 14  
                    alufn = h06
                    regfile_ra1 = d3    // temp sequence reg
                    asel = b00
                    regfile_we = 1
                    regfile_wa = d4     // mod sequence reg
                    game_fsm.d = GameStates.PG_SHR_TEMPR
                
                // correct
                GameStates.PG_SHR_TEMPR:    // delete the last 2 bits of the temp seq
                    debug_counter = 15  
                    alufn = h21     // SHR
                    regfile_ra1 = d3    // mod sequence reg
                    asel = b00
                    bsel = b11
                    regfile_we = 1
                    regfile_wa = d3     // temp sequence reg
                    game_fsm.d = GameStates.IDLE
                
                // correct
                GameStates.CHECK_ELEMENT_0:    // player presses button zero, check if sequence now is = 0
                    debug_counter = 16 
                    alufn = h33 //CMPEQ
                    regfile_ra2 = d4    // mod seq reg
                    asel = b01
                    bsel = b00
                    regfile_we = 1
                    regfile_wa = d5     // check reg
                    game_fsm.d = GameStates.BRANCH_ELEMENT_BUTTON
                
                // correct
                GameStates.CHECK_ELEMENT_1:    // player presses button zero, check if sequence now is = 1
                    debug_counter = 17 
                    alufn = h33 //CMPEQ
                    regfile_ra2 = d4    // mod seq reg
                    asel = b10
                    bsel = b00
                    regfile_we = 1
                    regfile_wa = d5     // check reg
                    game_fsm.d = GameStates.BRANCH_ELEMENT_BUTTON
                
                // correct
                GameStates.CHECK_ELEMENT_2:    // player presses button zero, check if sequence now is = 2
                    debug_counter = 18
                    alufn = h33 //CMPEQ
                    regfile_ra2 = d4    // mod seq reg
                    asel = b11
                    bsel = b00
                    regfile_we = 1
                    regfile_wa = d5     // check reg
                    game_fsm.d = GameStates.BRANCH_ELEMENT_BUTTON
                
                // correct
                GameStates.CHECK_ELEMENT_3:    // player presses button zero, check if sequence now is = 3
                    debug_counter = 19
                    alufn = h33 //CMPEQ
                    regfile_ra1 = d4    // mod seq reg
                    asel = b00
                    bsel = b100
                    regfile_we = 1
                    regfile_wa = d5     // check reg
                    game_fsm.d = GameStates.BRANCH_ELEMENT_BUTTON
                
                // correct
                GameStates.BRANCH_ELEMENT_BUTTON:    // branching the above 4 checks
                    regfile_ra2 = d5    // check reg
                    if (regfile_rd2[0]){    // if yes, increase seq order reg by 1
                        game_fsm.d = GameStates.PG_INCREASE_SEQ_ORDER
                    }
                    else{    // if no, player presses wrong button and game terminates
                        game_fsm.d = GameStates.GAMEOVER
                    }
                
                // correct
                GameStates.PG_INCREASE_SEQ_ORDER:    // increase seq order reg by 1
                    debug_counter = 20
                    alufn = h00     // ADD
                    regfile_ra1 = d7    // seq order reg
                    asel = b00
                    bsel = b10
                    regfile_we = 1
                    regfile_wa = d7     // seq order reg
                    game_fsm.d = GameStates.PG_CHECK_SEQ_ORDER
                
                // correct
                GameStates.PG_CHECK_SEQ_ORDER:    // check if seq order is < stage number
                    debug_counter = 21
                    alufn = h35     // CMPLT
                    regfile_ra1 = d7    // seq order reg
                    regfile_ra2 = d1    // stage reg
                    asel = b00
                    bsel = b00
                    regfile_we = 1
                    regfile_wa = d5     // check reg
                    game_fsm.d = GameStates.PG_BRANCH_SEQ_CHECK
                
                // correct
                GameStates.PG_BRANCH_SEQ_CHECK:    // branch from above
                    regfile_ra2 = d5    // check reg
                    if (regfile_rd2[0]){ // if yes, move on to next sequence
                        game_fsm.d = GameStates.PG_ASSIGN_E_R4
                    }
                    else{    // if not, stage has been passed and score increases by 1
                        game_fsm.d = GameStates.FR_ASSIGN_TEMP_SEQ
                    }
                
                // correct
                GameStates.FR_ASSIGN_TEMP_SEQ:    // reassign temp seq reg to seq reg
                    debug_counter = 22
                    alufn = h1A // LDR "A" 1A
                    regfile_ra1 = d2    // sequence reg
                    regfile_ra2 = d3    // temp sequence reg
                    asel = b00
                    bsel = b00
                    regfile_we = 1
                    regfile_wa = d3     // temp sequence reg
                    game_fsm.d = GameStates.FR_RESET_SEQ_ORD
                
                // correct
                GameStates.FR_RESET_SEQ_ORD:    // assign 0 to seq ord reg
                    debug_counter = 23
                    regfile_we = 1
                    regfile_wa = d7     // lights reg
                    alu_out_sel = b100
                    game_fsm.d = GameStates.FR_INCREASE_SCORE_1
                
                // correct
                GameStates.FR_INCREASE_SCORE_1:    // increase score reg by 1
                    debug_counter = 11
                    alufn = h00 // ADD
                    regfile_ra1 = d9
                    asel = b00
                    bsel = b10
                    regfile_wa = d9
                    regfile_we = 1
                    game_fsm.d = GameStates.FR_INCREASE_STAGE_1
                
                // herehere
                GameStates.FR_INCREASE_STAGE_1:    // increase stage reg by 1
                    alufn = h00 // ADD
                    regfile_ra1 = d1
                    asel = b00
                    bsel = b10
                    regfile_wa = d1
                    regfile_we = 1
                    game_fsm.d = GameStates.GENERATE_SEQUENCE
                
                GameStates.GAMEOVER:    // self explanatory
                    debug_counter = 88
                    alu_out_sel = b01
                    regfile_wa = d9
                    regfile_we = 1
                    game_fsm.d = GameStates.END_DISPLAY_OVER
                
                GameStates.END_DISPLAY_OVER:
                    alu_out_sel = b01
                    regfile_wa = d0
                    regfile_we = 1
                    game_fsm.d = GameStates.GAMEOVER
                
                GameStates.PLAYER_WINS:
                    alu_out_sel = b101
                    regfile_wa = d9
                    regfile_we = 1
                    game_fsm.d = GameStates.END_DISPLAY_WIN
                
                GameStates.END_DISPLAY_WIN:
                    alu_out_sel = b101
                    regfile_wa = d0
                    regfile_we = 1
                    game_fsm.d = GameStates.PLAYER_WINS
                
                GameStates.IDLE:
                    if (decrease_timer){    
                        game_fsm.d = GameStates.CHECK_GAMETIMER
                    }
                    if (e0_button && ~e1_button && ~e2_button && ~e3_button){ // only up button is pressed
                        game_fsm.d = GameStates.CHECK_ELEMENT_0
                    }
                    else if (e1_button && ~e2_button && ~e3_button && ~e0_button){ // only right button is pressed
                        game_fsm.d = GameStates.CHECK_ELEMENT_1
                    }
                    else if (e2_button && ~e0_button && ~e1_button && ~e3_button){ // only down button is pressed
                        game_fsm.d = GameStates.CHECK_ELEMENT_2
                    }
                    else if (e3_button && ~e0_button && ~e1_button && ~e2_button){ // only left button is pressed
                        game_fsm.d = GameStates.CHECK_ELEMENT_3
                    }
            }
        }
        
    }
}